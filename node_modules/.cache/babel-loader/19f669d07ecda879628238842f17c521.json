{"remainingRequest":"/Users/will.miller/Documents/prototype/draw_candle/node_modules/babel-loader/lib/index.js!/Users/will.miller/Documents/prototype/draw_candle/node_modules/eslint-loader/index.js??ref--13-0!/Users/will.miller/Documents/prototype/draw_candle/src/components/DrawChart/DrawChart.js?vue&type=script&lang=js&","dependencies":[{"path":"/Users/will.miller/Documents/prototype/draw_candle/src/components/DrawChart/DrawChart.js","mtime":1551329107658},{"path":"/Users/will.miller/Documents/prototype/draw_candle/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/will.miller/Documents/prototype/draw_candle/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/will.miller/Documents/prototype/draw_candle/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport SVG from 'svg.js';\nimport 'svg.select.js';\nimport 'svg.resize.js';\nexport default {\n  name: 'DrawChart',\n  props: {},\n  mounted: function mounted() {\n    var grid = {\n      priceStart: 0,\n      priceEnd: 10,\n      priceIncr: 2\n    };\n    var priceEnd = grid.priceEnd,\n        priceIncr = grid.priceIncr; // Make SVG Drawing Canvas\n\n    var draw = SVG('chart').size(300, 300); // Set the height value of bottom price line\n\n    var lineHeight = priceEnd / priceIncr * 30 + 35; // Create an array to push grid line numbers and line height into\n\n    var gridData = []; // Draw the grid axis\n\n    drawAxis(lineHeight - 30); // Loop through number of lines (priceEnd / priceIncr)\n\n    for (var i = 0; i <= priceEnd / priceIncr; i++) {\n      // Subtract 30 from/set line height\n      lineHeight -= 30; // Push an array including line number and line height values into gridData\n\n      gridData.push([i * priceIncr, lineHeight]);\n    } // Loop over gridData and draw a price line with the number and line height data in each item\n\n\n    for (var _i = 0; _i < gridData.length; _i++) {\n      var line = gridData[_i];\n      drawPriceLine(line[0], line[1]);\n    }\n\n    function drawPriceLine(n, h) {\n      if (n !== 0) {\n        draw.line('100%', h, 20, h).stroke({\n          color: '#aaa',\n          width: 1\n        });\n      }\n\n      draw.text(n.toString()).move(0, h - 4).font({\n        size: '11px',\n        fill: '#000',\n        family: 'Arial'\n      });\n    }\n\n    function drawAxis(h) {\n      draw.line(20, h, 20, 5).stroke({\n        color: '#000',\n        width: 1\n      });\n      draw.line('100%', h, 20, h).stroke({\n        color: '#000',\n        width: 1\n      });\n    }\n    /*\n    const rect = draw.rect(40, 40).fill('#62C848').move(250, 50).selectize({\n      rotationPoint: false\n    }).resize({\n      snapToGrid: 5\n    });\n    */\n\n  }\n};",{"version":3,"sources":["/Users/will.miller/Documents/prototype/draw_candle/src/components/DrawChart/DrawChart.js"],"names":["SVG","name","props","mounted","grid","priceStart","priceEnd","priceIncr","draw","size","lineHeight","gridData","drawAxis","i","push","line","drawPriceLine","n","h","stroke","color","width","text","toString","move","font","fill","family"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,QAAhB;AACA,OAAO,eAAP;AACA,OAAO,eAAP;AAEA,eAAe;AACbC,EAAAA,IAAI,EAAE,WADO;AAEbC,EAAAA,KAAK,EAAE,EAFM;AAGbC,EAAAA,OAHa,qBAGH;AAER,QAAMC,IAAI,GAAG;AACXC,MAAAA,UAAU,EAAE,CADD;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXC,MAAAA,SAAS,EAAE;AAHA,KAAb;AAFQ,QAQND,QARM,GAUJF,IAVI,CAQNE,QARM;AAAA,QASNC,SATM,GAUJH,IAVI,CASNG,SATM,EAYR;;AACA,QAAMC,IAAI,GAAGR,GAAG,CAAC,OAAD,CAAH,CAAaS,IAAb,CAAkB,GAAlB,EAAuB,GAAvB,CAAb,CAbQ,CAeR;;AACA,QAAIC,UAAU,GAAGJ,QAAQ,GAAGC,SAAX,GAAuB,EAAvB,GAA4B,EAA7C,CAhBQ,CAiBR;;AACA,QAAII,QAAQ,GAAG,EAAf,CAlBQ,CAoBR;;AACAC,IAAAA,QAAQ,CAACF,UAAU,GAAG,EAAd,CAAR,CArBQ,CAuBR;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,QAAQ,GAAGC,SAAhC,EAA2CM,CAAC,EAA5C,EAAgD;AAC9C;AACAH,MAAAA,UAAU,IAAI,EAAd,CAF8C,CAG9C;;AACAC,MAAAA,QAAQ,CAACG,IAAT,CAAc,CAACD,CAAC,GAAGN,SAAL,EAAgBG,UAAhB,CAAd;AACD,KA7BO,CA+BR;;;AACA,0BAAmBC,QAAnB,eAA6B;AAAxB,UAAMI,IAAI,GAAIJ,QAAJ,IAAV;AACHK,MAAAA,aAAa,CAACD,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAAb;AACD;;AAED,aAASC,aAAT,CAAuBC,CAAvB,EAA0BC,CAA1B,EAA6B;AAC3B,UAAID,CAAC,KAAK,CAAV,EAAa;AACXT,QAAAA,IAAI,CAACO,IAAL,CAAU,MAAV,EAAkBG,CAAlB,EAAqB,EAArB,EAAyBA,CAAzB,EAA4BC,MAA5B,CAAmC;AACjCC,UAAAA,KAAK,EAAE,MAD0B;AAEjCC,UAAAA,KAAK,EAAE;AAF0B,SAAnC;AAID;;AACDb,MAAAA,IAAI,CAACc,IAAL,CAAUL,CAAC,CAACM,QAAF,EAAV,EAAwBC,IAAxB,CAA6B,CAA7B,EAAgCN,CAAC,GAAG,CAApC,EAAuCO,IAAvC,CAA4C;AAC1ChB,QAAAA,IAAI,EAAE,MADoC;AAE1CiB,QAAAA,IAAI,EAAE,MAFoC;AAG1CC,QAAAA,MAAM,EAAE;AAHkC,OAA5C;AAKD;;AAED,aAASf,QAAT,CAAkBM,CAAlB,EAAqB;AACnBV,MAAAA,IAAI,CAACO,IAAL,CAAU,EAAV,EAAcG,CAAd,EAAiB,EAAjB,EAAqB,CAArB,EAAwBC,MAAxB,CAA+B;AAC7BC,QAAAA,KAAK,EAAE,MADsB;AAE7BC,QAAAA,KAAK,EAAE;AAFsB,OAA/B;AAIAb,MAAAA,IAAI,CAACO,IAAL,CAAU,MAAV,EAAkBG,CAAlB,EAAqB,EAArB,EAAyBA,CAAzB,EAA4BC,MAA5B,CAAmC;AACjCC,QAAAA,KAAK,EAAE,MAD0B;AAEjCC,QAAAA,KAAK,EAAE;AAF0B,OAAnC;AAID;AAED;;;;;;;;AAOD;AAvEY,CAAf","sourcesContent":["import SVG from 'svg.js'\nimport 'svg.select.js'\nimport 'svg.resize.js'\n\nexport default {\n  name: 'DrawChart',\n  props: {},\n  mounted() {\n\n    const grid = {\n      priceStart: 0,\n      priceEnd: 10,\n      priceIncr: 2\n    };\n    const {\n      priceEnd,\n      priceIncr\n    } = grid;\n\n    // Make SVG Drawing Canvas\n    const draw = SVG('chart').size(300, 300);\n\n    // Set the height value of bottom price line\n    let lineHeight = priceEnd / priceIncr * 30 + 35;\n    // Create an array to push grid line numbers and line height into\n    let gridData = [];\n\n    // Draw the grid axis\n    drawAxis(lineHeight - 30);\n\n    // Loop through number of lines (priceEnd / priceIncr)\n    for (var i = 0; i <= priceEnd / priceIncr; i++) {\n      // Subtract 30 from/set line height\n      lineHeight -= 30;\n      // Push an array including line number and line height values into gridData\n      gridData.push([i * priceIncr, lineHeight]);\n    }\n\n    // Loop over gridData and draw a price line with the number and line height data in each item\n    for (const line of gridData) {\n      drawPriceLine(line[0], line[1]);\n    }\n\n    function drawPriceLine(n, h) {\n      if (n !== 0) {\n        draw.line('100%', h, 20, h).stroke({\n          color: '#aaa',\n          width: 1\n        });\n      }\n      draw.text(n.toString()).move(0, h - 4).font({\n        size: '11px',\n        fill: '#000',\n        family: 'Arial'\n      });\n    }\n\n    function drawAxis(h) {\n      draw.line(20, h, 20, 5).stroke({\n        color: '#000',\n        width: 1\n      });\n      draw.line('100%', h, 20, h).stroke({\n        color: '#000',\n        width: 1\n      });\n    }\n\n    /*\n    const rect = draw.rect(40, 40).fill('#62C848').move(250, 50).selectize({\n      rotationPoint: false\n    }).resize({\n      snapToGrid: 5\n    });\n    */\n  }\n\n}"]}]}