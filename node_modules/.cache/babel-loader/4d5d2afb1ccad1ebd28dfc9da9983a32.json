{"remainingRequest":"/Users/will.miller/Documents/prototype/draw_candle/node_modules/babel-loader/lib/index.js!/Users/will.miller/Documents/prototype/draw_candle/node_modules/eslint-loader/index.js??ref--13-0!/Users/will.miller/Documents/prototype/draw_candle/src/components/DrawChart/DrawChart.js?vue&type=script&lang=js&","dependencies":[{"path":"/Users/will.miller/Documents/prototype/draw_candle/src/components/DrawChart/DrawChart.js","mtime":1551369086862},{"path":"/Users/will.miller/Documents/prototype/draw_candle/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/will.miller/Documents/prototype/draw_candle/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/will.miller/Documents/prototype/draw_candle/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import SVG from 'svg.js';\nimport 'svg.select.js';\nimport 'svg.resize.js';\nexport default {\n  name: 'DrawChart',\n  props: {},\n  mounted: function mounted() {\n    this.drawChart();\n  },\n  methods: {\n    drawChart: function drawChart() {\n      var grid = {\n        priceStart: 0,\n        priceEnd: 10,\n        priceIncr: 2,\n        gridWidth: 300,\n        gridHeight: 300,\n        axisColor: '#000',\n        priceLineColor: '#aaa',\n        numColor: '#555'\n      };\n      var priceEnd = grid.priceEnd,\n          priceIncr = grid.priceIncr,\n          gridWidth = grid.gridWidth,\n          gridHeight = grid.gridHeight,\n          axisColor = grid.axisColor,\n          priceLineColor = grid.priceLineColor,\n          numColor = grid.numColor; // Make SVG Drawing Canvas\n\n      var draw = SVG('chart').size(gridWidth, gridHeight); // Set the height value of bottom price line\n\n      var lineHeight = priceEnd / priceIncr * 30 + 35; // Create an array to push grid line numbers and line height into\n\n      var gridData = []; // Draw the grid axis\n\n      drawAxis(lineHeight - 30); // Loop through number of lines (priceEnd / priceIncr)\n\n      for (var i = 0; i <= priceEnd / priceIncr; i++) {\n        // Subtract 30 from/set line height\n        lineHeight -= 30; // Push an array including line number and line height values into gridData\n\n        gridData.push([i * priceIncr, lineHeight]);\n      } // Loop over gridData and draw a price line with the number and line height data in each item\n\n\n      for (var _i = 0; _i < gridData.length; _i++) {\n        var line = gridData[_i];\n        drawPriceLine(line[0], line[1]);\n      }\n\n      function drawPriceLine(n, h) {\n        if (n !== 0) {\n          draw.line('100%', h, 26, h).stroke({\n            color: priceLineColor,\n            width: 1\n          });\n        }\n\n        draw.text(n.toString()).move(0, h - 6).font({\n          size: '12px',\n          fill: numColor,\n          family: 'Arial'\n        });\n      }\n\n      function drawAxis(h) {\n        draw.line(25, h, 25, 5).stroke({\n          color: axisColor,\n          width: 1\n        });\n        draw.line('100%', h, 25, h).stroke({\n          color: axisColor,\n          width: 1\n        });\n      }\n      /*\n      const rect = draw.rect(40, 40).fill('#f06').move(250, 50).selectize({\n        rotationPoint: false\n      }).resize({\n        snapToGrid: 5\n      })\n      */\n\n    }\n  }\n};",{"version":3,"sources":["/Users/will.miller/Documents/prototype/draw_candle/src/components/DrawChart/DrawChart.js"],"names":["SVG","name","props","mounted","drawChart","methods","grid","priceStart","priceEnd","priceIncr","gridWidth","gridHeight","axisColor","priceLineColor","numColor","draw","size","lineHeight","gridData","drawAxis","i","push","line","drawPriceLine","n","h","stroke","color","width","text","toString","move","font","fill","family"],"mappings":"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","sourcesContent":["import SVG from 'svg.js'\nimport 'svg.select.js'\nimport 'svg.resize.js'\n\nexport default {\n  name: 'DrawChart',\n  props: {},\n  mounted() {\n    this.drawChart();\n  },\n  methods: {\n    drawChart() {\n\n      const grid = {\n        priceStart: 0,\n        priceEnd: 10,\n        priceIncr: 2,\n        gridWidth: 300,\n        gridHeight: 300,\n        axisColor: '#000',\n        priceLineColor: '#aaa',\n        numColor: '#555'\n      }\n\n      const {\n        priceEnd,\n        priceIncr,\n        gridWidth,\n        gridHeight,\n        axisColor,\n        priceLineColor,\n        numColor\n      } = grid;\n\n      // Make SVG Drawing Canvas\n      const draw = SVG('chart').size(gridWidth, gridHeight);\n\n      // Set the height value of bottom price line\n      let lineHeight = priceEnd / priceIncr * 30 + 35;\n      // Create an array to push grid line numbers and line height into\n      const gridData = [];\n\n      // Draw the grid axis\n      drawAxis(lineHeight - 30);\n\n      // Loop through number of lines (priceEnd / priceIncr)\n      for (let i = 0; i <= priceEnd / priceIncr; i++) {\n        // Subtract 30 from/set line height\n        lineHeight -= 30;\n        // Push an array including line number and line height values into gridData\n        gridData.push([i * priceIncr, lineHeight]);\n      }\n\n      // Loop over gridData and draw a price line with the number and line height data in each item\n      for (const line of gridData) {\n        drawPriceLine(line[0], line[1]);\n      }\n\n      function drawPriceLine(n, h) {\n        if (n !== 0) {\n          draw.line('100%', h, 26, h).stroke({\n            color: priceLineColor,\n            width: 1\n          });\n        }\n        draw.text(n.toString()).move(0, h - 6).font({\n          size: '12px',\n          fill: numColor,\n          family: 'Arial'\n        });\n      }\n\n      function drawAxis(h) {\n        draw.line(25, h, 25, 5).stroke({\n          color: axisColor,\n          width: 1\n        });\n        draw.line('100%', h, 25, h).stroke({\n          color: axisColor,\n          width: 1\n        });\n      }\n\n      /*\n      const rect = draw.rect(40, 40).fill('#f06').move(250, 50).selectize({\n        rotationPoint: false\n      }).resize({\n        snapToGrid: 5\n      })\n      */\n\n    }\n  }\n\n}"]}]}